{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // 3 types of components:\n// autonomous component - logic for getting data is inside the component\n// higher order component - parent component fetches data and passes it down through props\n// abstracted service layer- \n//separating service layer from rendering of components- helps to reduce code and allow for more reus\n// custom hook for performing get request\n\nexport const useFetch = (searchMethod, searchValue) => {\n  const getAll = \"http://localhost:8080/api/students\";\n  const getById = \"http://localhost:8080/api/students/\" + searchValue;\n  let url = null; // allows us to use same hook for diff get requests/params\n\n  switch (searchMethod) {\n    case 'getAll':\n      url = getAll;\n      break;\n\n    case 'getById':\n      url = getById;\n      break;\n\n    default:\n      url = null;\n  } // set states for initial empty array of students and loading boolean\n\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true); // contains our Axios API call, with error handling and finally block\n\n  useEffect(() => {\n    const fetchData = async function () {\n      try {\n        setLoading(true);\n        const response = await axios.get(url);\n\n        if (response.status === 200) {\n          setData(response.data);\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData(); // the [] contains states that we check for change, if one state in array changes, effect will execute\n  }, [url]);\n  return {\n    loading,\n    data\n  };\n};\nexport function deleteStudent(studentId) {\n  return axios.delete('http://localhost:8080/api/delete/student/' + studentId);\n}\nexport function createStudent(student) {\n  return axios.post('http://localhost:8080/api/add/student', student);\n}","map":{"version":3,"sources":["C:/React_Workspace/consume-api-project/src/service/StudentService.jsx"],"names":["React","useState","useEffect","axios","useFetch","searchMethod","searchValue","getAll","getById","url","data","setData","loading","setLoading","fetchData","response","get","status","error","deleteStudent","studentId","delete","createStudent","student","post"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,YAAD,EAAeC,WAAf,KAA8B;AAElD,QAAMC,MAAM,GAAG,oCAAf;AACA,QAAMC,OAAO,GAAG,wCAAwCF,WAAxD;AACA,MAAIG,GAAG,GAAG,IAAV,CAJkD,CAMlD;;AACA,UAAOJ,YAAP;AACI,SAAK,QAAL;AACII,MAAAA,GAAG,GAAGF,MAAN;AACA;;AACJ,SAAK,SAAL;AACIE,MAAAA,GAAG,GAAGD,OAAN;AACA;;AACJ;AACIC,MAAAA,GAAG,GAAG,IAAN;AARR,GAPkD,CAkBlD;;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC,CApBkD,CAsBlD;;AACAC,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMY,SAAS,GAAG,kBAAgB;AAC9B,UAAG;AACCD,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAME,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUP,GAAV,CAAvB;;AACA,YAAGM,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBN,UAAAA,OAAO,CAACI,QAAQ,CAACL,IAAV,CAAP;AACH;AACJ,OAND,CAMC,OAAMQ,KAAN,EAAY;AACT,cAAMA,KAAN;AACH,OARD,SAQQ;AACJL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAZD;;AAaAC,IAAAA,SAAS,GAdE,CAeX;AACH,GAhBQ,EAgBN,CAACL,GAAD,CAhBM,CAAT;AAiBA,SAAM;AAACG,IAAAA,OAAD;AAAUF,IAAAA;AAAV,GAAN;AACH,CAzCM;AA2CP,OAAO,SAASS,aAAT,CAAuBC,SAAvB,EAAiC;AACpC,SAAOjB,KAAK,CAACkB,MAAN,CAAa,8CAA8CD,SAA3D,CAAP;AACH;AAED,OAAO,SAASE,aAAT,CAAuBC,OAAvB,EAA+B;AAClC,SAAOpB,KAAK,CAACqB,IAAN,CAAW,uCAAX,EAAoDD,OAApD,CAAP;AACH","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n// 3 types of components:\r\n// autonomous component - logic for getting data is inside the component\r\n// higher order component - parent component fetches data and passes it down through props\r\n// abstracted service layer- \r\n//separating service layer from rendering of components- helps to reduce code and allow for more reus\r\n\r\n// custom hook for performing get request\r\nexport const useFetch = (searchMethod, searchValue) =>{\r\n\r\n    const getAll = \"http://localhost:8080/api/students\";\r\n    const getById = \"http://localhost:8080/api/students/\" + searchValue;\r\n    let url = null;\r\n\r\n    // allows us to use same hook for diff get requests/params\r\n    switch(searchMethod){\r\n        case 'getAll': \r\n            url = getAll;\r\n            break;\r\n        case 'getById':\r\n            url = getById;\r\n            break;\r\n        default:\r\n            url = null;\r\n    }\r\n\r\n    // set states for initial empty array of students and loading boolean\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // contains our Axios API call, with error handling and finally block\r\n    useEffect(() =>{\r\n        const fetchData = async function(){\r\n            try{\r\n                setLoading(true);\r\n                const response = await axios.get(url);\r\n                if(response.status === 200){\r\n                    setData(response.data);\r\n                }\r\n            }catch(error){\r\n                throw error;\r\n            }finally{\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n        // the [] contains states that we check for change, if one state in array changes, effect will execute\r\n    }, [url]);\r\n    return{loading, data};\r\n}\r\n\r\nexport function deleteStudent(studentId){\r\n    return axios.delete('http://localhost:8080/api/delete/student/' + studentId);\r\n}\r\n\r\nexport function createStudent(student){\r\n    return axios.post('http://localhost:8080/api/add/student', student);\r\n}"]},"metadata":{},"sourceType":"module"}